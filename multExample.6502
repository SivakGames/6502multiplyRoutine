;======================================
;Memory aliases
;Simply assumes being in the ZP

;Rename accordingly
;======================================

backupA equ 0
backupX equ 1
temp0 equ 2
temp1 equ 3
temp2 equ 4

;==============================
;Main routine to multiply two 8 bit numbers and get a 16 bit value

;Assumes:
; A = Number 1
; X = Number 2

;Returns:
; A = low byte of result
; X = high byte of result

;+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/
;+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/

;The complete steps are effectively:
; oddFixer = a & x & 1
; val1 = floor( (a*a) / 2 )
; val2 = floor( (x*x) / 2 )
; val3 = floor( (abs(a-x)*abs(a-x)) / 2 )
; finalVal = (oddFixer + val1 + val2) - val3

MATH_MultiplyTwo8BitNumbers:
	STA backupA
	STX backupX
	STX temp0 ;Backup original X number again

;------------------------------------------
;Step 1
;Fix for ensuring the result is odd if for both base numbers are odd.

	AND backupX
	AND #%00000001
	STA temp1 ;Will be 1 if both numbers are odd, 0 otherwise

;------------------------------------------
;Step 2

;Using the LUT, transform number 1 by squaring it and dividing by 2
; and discard the remainder

;Using the LUT again, transform number 2 the same way

;Finally, take the odd number fix from the previous step
; and add it and both of the transformed numbers together

;+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/+-*/
;Effectively:
; oddFix + floor((n1*n1)/2) + floor((n2*n2)/2)

;Store n1's transformed high byte
	LDX backupA
	LDA LUT_HI_8Bit_MultiplicationValues, X
	STA temp2

;Odd number fix + n1 transformed low byte
	CLC
	LDA temp1 ;The odd number fixer from earlier
	ADC LUT_LO_8Bit_MultiplicationValues, X

;Add n2 transformed low byte
	LDX backupX
	ADC LUT_LO_8Bit_MultiplicationValues, X  ;Index based on the X value originally passed into here
	STA temp1 ;Combined low byte

;Finally add high bytes together (carry is accounted for)
	LDA temp2
	ADC LUT_HI_8Bit_MultiplicationValues, X
	STA temp2 ;Combined high byte

;--------------------------------------------
;Step 3
;Subtract the smaller of the 2 values from the larger one
;Effectively this is taking the absolute value of the difference
; to ensure a positive number

;See if original A value > original X value
	LDA backupA
	CMP backupX
	BCS .calculateLargerMinusSmallerNumber
		STA temp0 ;Original X now = original A
		LDA backupX ;Original A now = original X (effectively inverts them)

.calculateLargerMinusSmallerNumber:
	SEC
	SBC temp0 ;Subtract smaller value from greater value
	TAX ;Result as an index

;--------------------------------------------
;Step 4
;Take the number from the previous step (now in X) and
; use it as an index to lookup another value

;Take this value and subtract it from the combined sum of numbers from earlier

;This then becomes the final result!

	LDA temp1 ;Combined low byte from earlier
	SBC LUT_LO_8Bit_MultiplicationValues, X
	STA backupA
	LDA temp2 ;Combined high byte from earlier
	SBC LUT_HI_8Bit_MultiplicationValues, X
	TAX ;Final high byte
	LDA backupA ;Final low byte
	RTS


;+++++++++++++++++++++++++++++++++++++++++++
;The following tables are of squares divided by 2:

;Effectively:
; floor(pow(n, 2) / 2)

;+++++++++++++++++++++++++++++++++++++++++++
;Table 1: Low bytes

LUT_LO_8Bit_MultiplicationValues:
	.repeat 256, i
	.db ((i*i) >> 1) & $000ff
	.endrepeat

;	.db $00,$00,$02,$04,$08,$0c,$12,$18,$20,$28,$32,$3c,$48,$54,$62,$70
;	.db $80,$90,$a2,$b4,$c8,$dc,$f2,$08,$20,$38,$52,$6c,$88,$a4,$c2,$e0
;	.db $00,$20,$42,$64,$88,$ac,$d2,$f8,$20,$48,$72,$9c,$c8,$f4,$22,$50
;	.db $80,$b0,$e2,$14,$48,$7c,$b2,$e8,$20,$58,$92,$cc,$08,$44,$82,$c0
;	.db $00,$40,$82,$c4,$08,$4c,$92,$d8,$20,$68,$b2,$fc,$48,$94,$e2,$30
;	.db $80,$d0,$22,$74,$c8,$1c,$72,$c8,$20,$78,$d2,$2c,$88,$e4,$42,$a0
;	.db $00,$60,$c2,$24,$88,$ec,$52,$b8,$20,$88,$f2,$5c,$c8,$34,$a2,$10
;	.db $80,$f0,$62,$d4,$48,$bc,$32,$a8,$20,$98,$12,$8c,$08,$84,$02,$80

;	.db $00,$80,$02,$84,$08,$8c,$12,$98,$20,$a8,$32,$bc,$48,$d4,$62,$f0
;	.db $80,$10,$a2,$34,$c8,$5c,$f2,$88,$20,$b8,$52,$ec,$88,$24,$c2,$60
;	.db $00,$a0,$42,$e4,$88,$2c,$d2,$78,$20,$c8,$72,$1c,$c8,$74,$22,$d0
;	.db $80,$30,$e2,$94,$48,$fc,$b2,$68,$20,$d8,$92,$4c,$08,$c4,$82,$40
;	.db $00,$c0,$82,$44,$08,$cc,$92,$58,$20,$e8,$b2,$7c,$48,$14,$e2,$b0
;	.db $80,$50,$22,$f4,$c8,$9c,$72,$48,$20,$f8,$d2,$ac,$88,$64,$42,$20
;	.db $00,$e0,$c2,$a4,$88,$6c,$52,$38,$20,$08,$f2,$dc,$c8,$b4,$a2,$90
;	.db $80,$70,$62,$54,$48,$3c,$32,$28,$20,$18,$12,$0c,$08,$04,$02,$00

;+++++++++++++++++++++++++++++++++++++++++++
;Table 2: High bytes

LUT_HI_8Bit_MultiplicationValues:
	.repeat 256, i
	.db ((i*i) >> 9) & $000ff
	.endrepeat

;	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;	.db $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01
;	.db $02,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$03,$03,$04,$04
;	.db $04,$04,$04,$05,$05,$05,$05,$05,$06,$06,$06,$06,$07,$07,$07,$07
;	.db $08,$08,$08,$08,$09,$09,$09,$09,$0a,$0a,$0a,$0a,$0b,$0b,$0b,$0c
;	.db $0c,$0c,$0d,$0d,$0d,$0e,$0e,$0e,$0f,$0f,$0f,$10,$10,$10,$11,$11
;	.db $12,$12,$12,$13,$13,$13,$14,$14,$15,$15,$15,$16,$16,$17,$17,$18
;	.db $18,$18,$19,$19,$1a,$1a,$1b,$1b,$1c,$1c,$1d,$1d,$1e,$1e,$1f,$1f

;	.db $20,$20,$21,$21,$22,$22,$23,$23,$24,$24,$25,$25,$26,$26,$27,$27
;	.db $28,$29,$29,$2a,$2a,$2b,$2b,$2c,$2d,$2d,$2e,$2e,$2f,$30,$30,$31
;	.db $32,$32,$33,$33,$34,$35,$35,$36,$37,$37,$38,$39,$39,$3a,$3b,$3b
;	.db $3c,$3d,$3d,$3e,$3f,$3f,$40,$41,$42,$42,$43,$44,$45,$45,$46,$47
;	.db $48,$48,$49,$4a,$4b,$4b,$4c,$4d,$4e,$4e,$4f,$50,$51,$52,$52,$53
;	.db $54,$55,$56,$56,$57,$58,$59,$5a,$5b,$5b,$5c,$5d,$5e,$5f,$60,$61
;	.db $62,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6a,$6b,$6c,$6d,$6e,$6f
;	.db $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f
